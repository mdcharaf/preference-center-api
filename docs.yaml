swagger: '2.0'
info:
  description: User Preferences API
  version: 1.0.0
  title: Preference Center API
  contact:
    email: muhammad.charaf@gmail.com

paths:
  /api/user/{userId}:
    get:
      summary: gets user
      operationId: UserController@getOne
      description: |
        Get User and corresponding events
      produces:
      - application/json
      parameters:
      - in: path
        name: userId
        description: required userId parameter
        required: true
        type: string
      responses:
        200:
          description: Gets user and corresponding events
          schema:
            $ref: '#/definitions/User'
        400:
          description: bad input parameter
        404:
          description: User does not exists
    delete:
      summary: deletes user
      operationId: UserController@delete
      description: |
        deletes user
      produces:
      - application/json
      parameters:
      - in: path
        name: userId
        description: required userId parameter
        required: true
        type: string
      responses:
        200:
          description: deletes user
        400:
          description: bad input parameter

    
  /api/user:
    post:
      summary: Add User
      operationId: UserController@create
      description: |
        Inserts User
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        required: true
        schema:
          type: object
          properties:
            email:
              type: string
      responses:
        201:
          description: Gets user and corresponding events
          schema:
            type: object
            properties:
              id:
                type: string
                format: uuid
              email:
                type: string
                format: email
        400:
          description: bad input parameter
        422:
          description: |
            User already exists
            Invalid email address
            
  /api/Event:
    post:
      summary: Add Event
      operationId: EventController@create
      description: |
        Inserts Event
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/Event'
            
      responses:
        201:
          description: Event created successfully
          schema:
            type: object
            properties:
              id:
                type: string
                format: uuid
              consentId:
                type: string
                enum: ['email_notifications', 'sms_notifications']
              userId:
                type: string
                format: uuid
        400:
          description: bad input parameter
        422:
          description: |
            Invalid consentId
      
definitions:
  User:
    type: object
    required:
    - email
    properties:
      id:
        type: string
        format: uuid
      email:
        type: string
        format: email
      consents:
        type: array
        items:
          type: object
          properties:
            id:
              type: string
              enum: ['email_notifications' ,'sms_notifications']
            enabled:
              type: boolean
  Event:
    required:
    - consentId
    - userId
    - enabled
    properties:
      consentId:
        type: string
        enum: ['email_notifications', 'sms_notifications']
      userId:
        type: string
        format: uuid
      enabled:
        type: boolean
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /mdcharaf/PreferenceCenterApi/1.0.0
schemes:
 - https